name: 构建、推送、签名和部署 Docker 镜像

# 触发条件：仅在 main 分支且带有 v*.*.* 格式的标签推送时触发
on:
  push:
    tags: ["v*.*.*"]

# 环境变量
env:
  REGISTRY: ghcr.io # 使用 GitHub Container Registry

jobs:
  build-and-push:
    # 运行环境：使用最新的 Ubuntu
    runs-on: ubuntu-latest
    # 权限设置：为签名和操作仓库内容提供必要的权限
    permissions:
      contents: read
      packages: write
      id-token: write # 用于签名

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录，用于生成元数据

      # 设置 Docker Buildx
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到 GitHub Container Registry
      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 生成小写的 IMAGE_NAME
      - name: 生成小写的 IMAGE_NAME
        id: lowercased_image_name
        run: |
          echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 提取 Docker 元数据（动态生成镜像标签）
      - name: 提取 Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}  # 使用语义化版本号作为标签

      # 构建并推送 Docker 镜像
      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v6
        with:
          context: . # 构建上下文为当前目录
          push: true # 推送镜像
          tags: ${{ steps.meta.outputs.tags }} # 使用动态生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 添加镜像元数据
          cache-from: type=gha # 使用 GitHub Actions 缓存
          cache-to: type=gha,mode=max

      # 安装 Cosign 用于镜像签名
      - name: 安装 Cosign
        uses: sigstore/cosign-installer@v3.8.0

      # 签名推送的 Docker 镜像
      - name: 签名推送的 Docker 镜像
        env:
          TAGS: ${{ steps.meta.outputs.tags }} # 动态生成的镜像标签
        run: |
          for tag in $TAGS; do
            echo "正在签名镜像: $tag"
            cosign sign --yes $tag  # 对镜像进行签名
          done

  deploy:
    # 部署任务依赖于构建和推送任务成功完成
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 通过 SSH 连接到远程服务器并部署应用
      - name: 通过 SSH 连接到远程服务器并部署应用
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }} # 服务器地址
          username: ci_user # 服务器用户名
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 私钥
          script: |
            # 定义容器名称和端口
            CONTAINER_NAME="github_${{ github.repository }}"  # 使用仓库名称作为容器名称
            APP_PORT=3000  # 应用的端口（可以根据需要动态设置）

            # 拉取最新镜像
            echo "正在拉取最新镜像..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.ref_name }}

            # 检查容器是否存在
            if docker ps -aq -f name=^${CONTAINER_NAME}$; then
              echo "正在停止并移除现有容器..."
              docker stop ${CONTAINER_NAME} || echo "容器已停止。"
              docker rm ${CONTAINER_NAME} || echo "容器已移除。"
            else
              echo "未找到现有容器。跳过停止和移除。"
            fi

            # 启动新容器
            echo "正在启动新容器..."
            docker run -d --name ${CONTAINER_NAME} -p ${APP_PORT}:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.ref_name }}
