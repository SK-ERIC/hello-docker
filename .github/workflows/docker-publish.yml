name: Container CI/CD Pipeline

on:
  push:
    tags: ["v*.*.*"]

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  PROJECT_NAME: "hello-docker"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-name: ${{ steps.process-name.outputs.safe-name }}
      image-tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Process naming
        id: process-name
        run: |
          SAFE_NAME=$(echo "$PROJECT_NAME" | 
            tr '[:upper:]' '[:lower:]' |
            sed 's/[^a-z0-9-]/-/g' |
            sed 's/-\+/-/g' |
            sed 's/^-\|-$//g')
          echo "safe-name=$SAFE_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$SAFE_NAME" >> $GITHUB_ENV

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            CONTAINER_NAME="github_hello-docker"
            IMAGE_NAME="${{ needs.build-and-push.outputs.image-name }}"
            TAG="${{ needs.build-and-push.outputs.image-tag }}"
            OWNER_LOWER=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
            IMAGE_REF="${{ env.REGISTRY }}/$OWNER_LOWER/$IMAGE_NAME:$TAG"

            echo "=== 部署参数 ==="
            echo "容器名称: $CONTAINER_NAME"
            echo "镜像地址: $IMAGE_REF"

            echo "Pulling image: $IMAGE_REF"
            docker pull $IMAGE_REF || { echo "Failed to pull image: $IMAGE_REF"; exit 1; }

            echo "Stopping and removing existing container if exists..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true

            # 新增网络配置
            docker network create next-net || true

            echo "Running new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              -p 8001:80 \
              -e NODE_ENV=production \
              $IMAGE_REF

            # 新增健康检查
            echo "等待服务启动..."
            sleep 10
            curl --retry 5 --retry-delay 10 --fail http://localhost:80/api/health

            echo "Verifying deployment..."
            sleep 5
            docker ps -f name=$CONTAINER_NAME --format "table {{.Names}}\t{{.Status}}"

            echo "Cleaning old images..."
            docker images --filter reference="$IMAGE_REF" --format "{{.ID}}" | 
              awk 'NR>2 {print $1}' | 
              xargs -r docker rmi || echo "No old images to remove."
